global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

#Document Snippets

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet sec "section{}" bA
\\section{$1}
$0
endsnippet

snippet ssec "subsection{}" bA
\\subsection{$1}
$0
endsnippet

snippet sign "sign" bA
Rojas C. Aar√≥n\\
endsnippet

snippet itemize "itemize" bA
\begin{itemize}
	$1
\end{itemize}
endsnippet

context "env()"
snippet item "item" bA
\item{$1} $0
endsnippet

snippet fig "Figure Environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet "newln" "new line" Aw
\newline
endsnippet

snippet "newpg" "new page" Aw
\newpage
endsnippet

context "math()"
snippet text "escape into text mode" Ai
\text{$1}$0
endsnippet

context "math()"
snippet newln "new line in math mode" Aw
\\\
endsnippet

snippet newpr "new paragraph" Aw
\par
endsnippet

#Math Snippets

snippet mathl "Math in line" Ai 
$ $1 $`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet mathm "Math" bA
$$ $1 $$
endsnippet

#Basic Written Math

context "math()"
snippet equal "=" Aw
=
endsnippet

context "math()"
snippet plus "+" Aw
+
endsnippet

context "math()"
snippet minus "-" Aw
-
endsnippet

context "math()"
snippet  product "*" Aw
\cdot
endsnippet

context "math()"
snippet '([^ \$\n]+)\s+over' "Smart fraction (captures numerator)" rA
\\frac{`!p snip.rv = match.group(1)`}{${1}}$0
endsnippet

context "math()"
snippet frac "/" Aw
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '([^ \$\n]+)+subindex' "smartsubindex" rA
`!p snip.rv = match.group(1)`_{$1}$0
endsnippet

context "math()"
snippet '([^ \$\n]+)+superindex' "smartsubindex" rA
`!p snip.rv = match.group(1)`^{$1}$0
endsnippet

context "math()"
snippet '([^ \$\n]+)+subsuperindex' "smartsubindex" rA
`!p snip.rv = match.group(1)`_{$1}^{$2}$0
endsnippet

#Logic and Set Theory

context "math()"
snippet and "and" Aw
\land $0
endsnippet

context "math()"
snippet or "or" Aw
\lor $0
endsnippet

context "math()"
snippet not "not" w
\lnot $0
endsnippet

context "math()"
snippet implies "implies" Aw
\implies $0
endsnippet

context "math()"
snippet if "if and only if" Aw
\iff $0
endsnippet

context "math()"
snippet implied "implied" Aw
\impliedby $0
endsnippet

context "math()"
snippet forall "for all" Aw
\forall $0
endsnippet

context "math()"
snippet exist "exist" Aw
\exists $0
endsnippet

context "math()"
snippet notexist "does not exist" Aw
\nexists $0
endsnippet

context "math()"
snippet in "in" Aw
\in $0
endsnippet

context "math()"
snippet notin "and" Aw
\notin $0
endsnippet

context "math()"
snippet ni "ni" Aw
\ni $0
endsnippet

context "math()"
snippet notni "and" Aw
\notni $0
endsnippet

context "math()"
snippet and "and" Aw
\sub $0
endsnippet

context "math()"
snippet ssub "subset" Aw
\subset $0
endsnippet

context "math()"
snippet ssup "superset" Aw
\supset $0
endsnippet

context "math()"
snippet ssubeq "subset eq" Aw
\subseteq $0
endsnippet

context "math()"
snippet ssupeq "superset eq" Aw
\supseteq $0
endsnippet

context "math()"
snippet therefore "therefore" Aw
\therefore $0
endsnippet

context "math()"
snippet because "because" Aw
\because $0
endsnippet

context "math()"
snippet null "empty set" Aw
\varnothing $0
endsnippet

context "math()"
snippet to "to" Aw
\to $0
endsnippet

context "math()"
snippet from "from" Aw
\gets $0
endsnippet

context "math()"
snippet fromto "from to" Aw
\leftrightarrow $0
endsnippet

#Greek letters



